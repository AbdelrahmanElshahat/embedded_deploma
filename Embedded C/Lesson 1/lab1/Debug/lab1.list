
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  080002f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  080002f8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000308  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000308  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000df0  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004fc  00000000  00000000  00020e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021320  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000214d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e36  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001fe0  00000000  00000000  0003646e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ca7  00000000  00000000  0003844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b10f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f0  00000000  00000000  000b1170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	080002e0 	.word	0x080002e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	080002e0 	.word	0x080002e0

0800014c <main>:
		vuint32_t pin_13:1;
	}PINS;
}R_ODR_t;
volatile R_ODR_t * R_ODR = (volatile R_ODR_t *)(GPIO_PORTA_BASE + 0x0c);
int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= RCC_IOPAEN;
 8000152:	4b1a      	ldr	r3, [pc, #104]	; (80001bc <main+0x70>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a19      	ldr	r2, [pc, #100]	; (80001bc <main+0x70>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFF0FFFFF;
 800015e:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <main+0x74>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a17      	ldr	r2, [pc, #92]	; (80001c0 <main+0x74>)
 8000164:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000168:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 800016a:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <main+0x74>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a14      	ldr	r2, [pc, #80]	; (80001c0 <main+0x74>)
 8000170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000174:	6013      	str	r3, [r2, #0]

  while (1)
  {
    R_ODR->PINS.pin_13 = 1;
 8000176:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <main+0x78>)
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	8813      	ldrh	r3, [r2, #0]
 800017c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000180:	8013      	strh	r3, [r2, #0]
    for(int i = 0 ; i<5000;i++);
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	e002      	b.n	800018e <main+0x42>
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	3301      	adds	r3, #1
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f241 3287 	movw	r2, #4999	; 0x1387
 8000194:	4293      	cmp	r3, r2
 8000196:	ddf7      	ble.n	8000188 <main+0x3c>
    R_ODR->PINS.pin_13 = 0;
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x78>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	8813      	ldrh	r3, [r2, #0]
 800019e:	f36f 334d 	bfc	r3, #13, #1
 80001a2:	8013      	strh	r3, [r2, #0]
    for(int i = 0 ; i<5000;i++);
 80001a4:	2300      	movs	r3, #0
 80001a6:	603b      	str	r3, [r7, #0]
 80001a8:	e002      	b.n	80001b0 <main+0x64>
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	603b      	str	r3, [r7, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80001b6:	4293      	cmp	r3, r2
 80001b8:	ddf7      	ble.n	80001aa <main+0x5e>
    R_ODR->PINS.pin_13 = 1;
 80001ba:	e7dc      	b.n	8000176 <main+0x2a>
 80001bc:	40021018 	.word	0x40021018
 80001c0:	40010804 	.word	0x40010804
 80001c4:	20000000 	.word	0x20000000

080001c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <HardFault_Handler+0x4>

080001da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001de:	e7fe      	b.n	80001de <MemManage_Handler+0x4>

080001e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <BusFault_Handler+0x4>

080001e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <UsageFault_Handler+0x4>

080001ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000214:	f000 f82e 	bl	8000274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}

0800021c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800024e:	f7ff ffe5 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000252:	f000 f821 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000256:	f7ff ff79 	bl	800014c <main>
  bx lr
 800025a:	4770      	bx	lr
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000264:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 8000268:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800026c:	20000028 	.word	0x20000028

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_IncTick+0x1c>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <HAL_IncTick+0x20>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4413      	add	r3, r2
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <HAL_IncTick+0x20>)
 8000286:	6013      	str	r3, [r2, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	20000004 	.word	0x20000004
 8000294:	20000024 	.word	0x20000024

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2500      	movs	r5, #0
 800029c:	4e0c      	ldr	r6, [pc, #48]	; (80002d0 <__libc_init_array+0x38>)
 800029e:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 80002a0:	1ba4      	subs	r4, r4, r6
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	42a5      	cmp	r5, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	f000 f81a 	bl	80002e0 <_init>
 80002ac:	2500      	movs	r5, #0
 80002ae:	4e0a      	ldr	r6, [pc, #40]	; (80002d8 <__libc_init_array+0x40>)
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <__libc_init_array+0x44>)
 80002b2:	1ba4      	subs	r4, r4, r6
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002c0:	4798      	blx	r3
 80002c2:	3501      	adds	r5, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ca:	4798      	blx	r3
 80002cc:	3501      	adds	r5, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
